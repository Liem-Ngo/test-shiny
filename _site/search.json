[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Shinylive in Quarto example",
    "section": "",
    "text": "Editor with app\nIf you want to display an editor panel with along with the running application, use #| components: [editor, viewer]. Users will be able to use the editor to modify the code and re-run the application.\n#| standalone: true\n#| viewerHeight: 1000\nimport jinja2\n\nfrom shiny import App, ui, render\nimport pandas as pd\nimport plotnine as gg\nfrom pyodide.http import open_url\n\n\n# read data from file\n# jr = pd.read_csv(\"jr_shiny.csv\")\n\n## BEGIN: shinylive specific modification for loading \n## data file on hosted app\nfrom pathlib import Path\n\njr =pd.read_csv(open_url(\"https://raw.githubusercontent.com/jumpingrivers/blog-shiny-python-rtweet-dashboard/main/app/jr_shiny.csv\"))\n## END\n\njr = jr.astype({\"day\": \"object\"})\n\n# dictionary of choices for input_select\n# x axis of our graph of form {\"value\": \"UI label\"}\nchoices_select = {\n    \"year\": \"Year\",\n    \"day\": \"Day\",\n    \"hour\": \"Hour\",\n    \"media_type\": \"Media\"\n}\n\n# dictionary of choices for checkbox group\n# factors for table of form {\"value\": \"UI label\"}\nchoices_check = {\n    \"created_at\": \"Date\",\n    \"text\": \"Text\",\n    \"retweet_count\": \"Retweets\",\n    \"favorite_count\": \"Likes\"\n}\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            # user inputs in the sidebar\n            ui.input_select(\n                id=\"x\", label=\"X-axis Variable\", choices=choices_select, selected=\"year\"\n            ),\n            ui.input_numeric(\n                id=\"num\",\n                label=\"How many tweets do you want to view?\",\n                value=0,\n                min=0,\n                max=50\n            ),\n            ui.panel_conditional(\n                # a client-side condition for whether to display this panel\n                \"input.num &gt; 0 && input.num &lt;= 50\", \n                ui.input_checkbox_group(\n                    id=\"cols\",\n                    label=\"Select which variables you want to view:\",\n                    choices=choices_check,\n                    selected=([\"created_at\", \"text\"]),\n                )\n            )\n        ),\n        ui.panel_main(\n            ui.output_plot(\"plot\"), ui.output_text(\"text\"), ui.output_table(\"table\")\n        )\n    )\n)\n\n\n\ndef server(input, output, session):\n    @output\n    @render.plot\n    def plot(): # function name matches the id=\"plot\" in the outputs\n        # access input id=\"x\" value with input.x()\n        avg_int = jr.groupby(input.x(), as_index=False).agg(\n            {\"retweet_count\": \"mean\", \"favorite_count\": \"mean\"}\n        )\n        avg_int = pd.melt(avg_int, id_vars=input.x())\n        plot = (\n            gg.ggplot(avg_int, gg.aes(input.x(), \"value\", fill=\"variable\"))\n            + gg.geom_col(position=\"dodge\")\n            + gg.ylab(\"Average Interactions\")\n            + gg.scale_fill_brewer(\n                type=\"qual\",\n                palette=\"Dark2\",\n                name=\"Interaction\",\n                labels=([\"Like\", \"Retweet\"]),\n            )\n            + gg.theme_classic()\n        )\n        if input.x() == \"day\":\n            return plot + gg.scale_x_discrete(\n                labels=([\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"])\n            )\n        else:\n            return plot\n\n    @output\n    @render.text\n    def text():\n        if input.cols() == () or input.num() &lt;= 0 or input.num() &gt; 50:\n            return \"\"\n        elif input.num() == 1:\n            return \"Displaying the most recent @jumping_uk tweet:\"\n        else:\n            return f\"Displaying the {input.num()} most recent @jumping_uk tweets:\"\n\n    @output\n    @render.table\n    def table():\n        cols = jr.filter(input.cols())\n        cols.rename(\n            columns={\n                \"created_at\": \"Date\",\n                \"text\": \"Text\",\n                \"retweet_count\": \"Retweets\",\n                \"favorite_count\": \"Likes\",\n            },\n            inplace=True,\n        )\n        pd.set_option(\"colheader_justify\", \"left\")\n        first_n = cols.head(input.num())\n        if input.num() &lt;= 0 or input.num() &gt; 50:\n            return None\n        else:\n            return first_n\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "help.html#wie-gehts",
    "href": "help.html#wie-gehts",
    "title": "test_shiny_python",
    "section": "wie geht’s",
    "text": "wie geht’s\nbalblaa"
  }
]